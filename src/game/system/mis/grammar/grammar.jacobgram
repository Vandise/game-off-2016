%moduleName MisParser
%mode LALR

%left 'T_MULTIPLY' 'T_DIVIDE'
%left 'T_PLUS' 'T_MINUS'
%left 'T_GT' 'T_GE' 'T_LT' 'T_LE'
%left 'T_COLONEQUAL' 'T_NOT_EQUAL'

Root =
    Expressions function(expressions) {
      return expressions;      
    }
  ;

Expressions = 
    Expression function(expression) {
      return new imports.ast.BranchNode([expression]);
    }
  | Expressions Terminator Expression function(expressions, _, expression) {
      expressions.pushNode(expression);
      return expressions;
    }
  | Expressions Terminator function(expressions, _) {
      return expressions;
    }
  ;

Expression =
    Literal
  | SetLocal
  | GetLocal
  | Loop
  | If
  ;

Literal =
    'T_STRING' function(string) {
      return new imports.ast.LiteralNode(string);
    }
  | 'T_INTEGER' function(integer) {
      return new imports.ast.LiteralNode(integer);
    }
  ;

SetLocal =
    'T_IDENTIFIER' 'T_COLONEQUAL' Expression function(variable, _, expression) {
      return new imports.ast.AssignmentNode(variable, expression);
    }
  ;

GetLocal =
    'T_IDENTIFIER' function(local) {
      return new imports.ast.GetLocalNode(local);
    }
  ;

Loop =
    'T_LOOP' 'T_DO' Terminator
      Expressions
    'T_UNTIL' Expression function(loop, _, terminator, expressions, until, condition) {
      return new imports.ast.LoopNode(expressions, condition);
    }
  ;

If =
    'T_IF' Expression Terminator
      Expressions
    'T_END' function(tif, conditional, term, body, _) {
      return new imports.ast.IfNode(conditional, body);
    }
  ;

Terminator =
    'T_TERMINATOR'
  ;