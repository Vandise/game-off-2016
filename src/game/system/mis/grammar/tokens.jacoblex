%moduleName MisLexer

%%
digits = [0-9]
%%

<>\n {
  return 'T_TERMINATOR';
}

<>= {
  return 'T_EQUAL';  
}

<>!= {
  return 'T_NOT_EQUAL';  
}

<>\> {
  return 'T_GT';
}

<>\>= {
  return 'T_GE';
}

<>\< {
  return 'T_LT';
}

<>\<= {
  return 'T_LE';
}

<>+ {
  return 'T_PLUS';
}

<>- {
  return 'T_MINUS';
}

<>\[ {
  return 'T_OPEN_BRACKET';
}

<>\] {
  return 'T_CLOSE_BRACKET';
}

<>* {
  return 'T_MULTIPLY';
}

<>\/ {
  return 'T_DIVIDE';
}

<>\% {
  return 'T_MODULO';
}

<>\^ {
  return 'T_CARROT';
}

<>:= {
  return 'T_COLONEQUAL';
}

<>do {
  return 'T_DO';
}

<>while {
  return 'T_WHILE';
}

<>loop {
  return 'T_LOOP';
}

<>until {
  return 'T_UNTIL';
}

<>if {
  return 'T_IF';
}

<>else {
  return 'T_ELSE';
}

<>end {
  return 'T_END';
}

<>\( {
  return 'T_OPEN_PAREN';
}

<>\) {
  return 'T_CLOSE_PAREN';
}

<>, {
  return 'T_COMMA';
}

<>{digits}+   {
    this.jjval = parseInt(this.jjtext);
    return 'T_INTEGER';
}

<>\"[^"]*\" {
  this.jjval = this.jjtext.substring(1, this.jjtext.length-1);
  return 'T_STRING'; 
}

<>\w+ {
  this.jjval = this.jjtext;
  return 'T_IDENTIFIER';
}

<>\s+ {  }

<>$   { console.log('end of file'); return 'T_EOF'; }